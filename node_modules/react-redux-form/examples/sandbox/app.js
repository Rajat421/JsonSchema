import React, { Component } from 'react'
import ReactDOM from 'react-dom'
import _ from 'lodash';

import { createStore, applyMiddleware, combineReducers, compose } from 'redux'
import { Provider, connect } from 'react-redux'
// import { Form, Control, Errors, combineForms, actions } from 'react-redux-form'
import thunk from 'redux-thunk';
import createLogger from 'redux-logger';

import {
  Field,
  Errors,
  Control,
  Form,
  LocalForm,
  combineForms,
  actions,
  formReducer,
  modeled,
  controls
} from 'react-redux-form';

import { Checkbox } from 'react-mdl';
import 'react-mdl/extra/material.css';
import 'react-mdl/extra/material.js';

const initialUserState = {
  enabled: true
};

const store = createStore(combineForms({
  user: initialUserState,
}), applyMiddleware(thunk, createLogger()));

class UserForm extends Component {
  render() {
    return (
      <Form model="user" onSubmit={v => console.log(v)}>
        <Checkbox onChange={e=>(e.persist(),console.log(e))} />
        <Control
          model="user.enabled"
          component={Checkbox}
          label="Naive implementation (doesn't work)"
          isToggle={true}
          getValue={e=>e.target.checked}
          />
        <Control.checkbox
          model="user.enabled"
          component={Checkbox}
          label="Using Control.checkbox (works by accident)"
          />
        <Control
          model="user.enabled"
          component={Checkbox}
          changeAction={actions.checkWithValue}
          mapProps={controls.checkbox}
          label="Direct implementation - same as the previous one"
          />

        <button type="submit">
          Submit (check console)
        </button>
      </Form>
    )
  }
}

class App extends React.Component {
  render() {
    return (
      <Provider store={store}>
        <UserForm />
      </Provider>
    );
  }
}

ReactDOM.render(<App />, document.getElementById('app'));
